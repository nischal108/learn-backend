/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404
    
    */
    const express = require('express');
    const fs = require('fs');
    
    const app = express();
    const PORT = 3000;
    const filePath = 'data.json';
    
    app.use(express.json());
    
    let todos = [];
    
    // Load todos from file, or create initial todos if file doesn't exist
    function loadTodosFromFile() {
      if (fs.existsSync(filePath)) {
        const data = fs.readFileSync(filePath, 'utf8');
        if (data.trim() !== '') {
          todos = JSON.parse(data);
        } else {
          console.error("Failed to load todos from file: File is empty");
          createInitialTodos();
        }
      } else {
        console.error("Failed to load todos from file: No such file found");
        createInitialTodos();
      }
    }
    
    // Create initial todos with two tasks
    function createInitialTodos() {
      todos = [
        { id: 1, title: "Finish project assignment", description: "Complete the coding project for class" },
        { id: 2, title: "Buy groceries", description: "Pick up milk, eggs, and bread" }
      ];
      saveTodosToFile();
    }
    
    createInitialTodos()
    // Save todos to file
    function saveTodosToFile() {
      fs.writeFileSync(filePath, JSON.stringify(todos), 'utf8');
    }
    
    // GET /todos
    app.get('/todos', (req, res) => {
      res.status(200).json(todos);
    });
    
    // GET /todos/:id
    app.get('/todos/:id', (req, res) => {
      const id = req.params.id;
      const todo = todos.find(todo => todo.id === parseInt(id));
      if (todo) {
        res.status(200).json(todo);
      } else {
        res.status(404).send('Todo not found');
      }
    });
    
    // POST /todos
    app.post('/todos', (req, res) => {
      const todo = req.body;
      todo.id = todos.length > 0 ? todos[todos.length - 1].id + 1 : 1; // Generate unique ID
      todos.push(todo);
      saveTodosToFile();
      res.status(201).json({ id: todo.id });
    });
    
    // PUT /todos/:id
    app.put('/todos/:id', (req, res) => {
      const id = req.params.id;
      const index = todos.findIndex(todo => todo.id === parseInt(id));
      if (index !== -1) {
        todos[index] = req.body;
        saveTodosToFile();
        res.status(200).send('Todo updated successfully');
      } else {
        res.status(404).send('Todo not found');
      }
    });
    
    // DELETE /todos/:id
    app.delete('/todos/:id', (req, res) => {
      const id = req.params.id;
      const index = todos.findIndex(todo => todo.id === parseInt(id));
      if (index !== -1) {
        todos.splice(index, 1);
        saveTodosToFile();
        res.status(200).send('Todo deleted successfully');
      } else {
        res.status(404).send('Todo not found');
      }
    });
    
    // Handle undefined routes
    app.use((req, res) => {
      res.status(404).send('Route not found');
    });
    
    // Load todos from file or create initial ones
    loadTodosFromFile();
    
    // Start server
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
    